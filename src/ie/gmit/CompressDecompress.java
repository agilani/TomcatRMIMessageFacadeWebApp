package ie.gmit;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.util.zip.GZIPInputStream;
import java.util.zip.GZIPOutputStream;

import org.apache.commons.io.output.ByteArrayOutputStream;

public class CompressDecompress implements Remote{

	public UserMessage compress(UserMessage umsg) throws RemoteException, UnsupportedEncodingException{
		UserMessage newMsgAfterAction = new UserMessage(); //creating a message as response
		newMsgAfterAction.setAction(umsg.getAction()); //the action of the message which is getting performed
		newMsgAfterAction.setMessageID(umsg.getMessageID()); //the message id
		newMsgAfterAction.setMessagePWD(umsg.getMessagePWD()); //the original password by user or generated by system
		newMsgAfterAction.setFileName(umsg.getFileName()); //the original filename by user
		newMsgAfterAction.IsFile(umsg.IsFile()); //is it file or not
		newMsgAfterAction.setOutputPath(umsg.getOutputPath());//the original output path from the request
		
		//bytearray stream
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        GZIPOutputStream gzip; //gzipsteam object
		try {
			gzip = new GZIPOutputStream(out); //create a gzip output stream
	        gzip.write(umsg.getMessage()); //write bytes to the stream
	        gzip.close(); //close the gzip
			newMsgAfterAction.setMessage(out.toByteArray()); //put the byte array back in to the message
			newMsgAfterAction.setMessageStatus(MessageStatusCodeEnum.Successful); //flag operation sucessful
			out.close();
		} catch (IOException e) {
			//compression failed. put the error message in the array
		    newMsgAfterAction.setMessage(("Compression unsuccessful. Error: " + e.getMessage()).getBytes("UTF-8"));
			newMsgAfterAction.setMessageStatus(MessageStatusCodeEnum.Failed); //flag it unsuccessful
		}

		//return the usermessage
		return newMsgAfterAction;
	}
	
	public UserMessage decompress(UserMessage umsg) throws RemoteException, UnsupportedEncodingException{
		UserMessage newMsgAfterAction = new UserMessage(); //creating a message as response
		newMsgAfterAction.setAction(umsg.getAction()); //the action of the message which is getting performed
		newMsgAfterAction.setMessageID(umsg.getMessageID()); //the message id
		newMsgAfterAction.setMessagePWD(umsg.getMessagePWD()); //the original password by user or generated by system
		newMsgAfterAction.setFileName(umsg.getFileName()); //the original filename by user
		newMsgAfterAction.IsFile(umsg.IsFile()); //is it file or not
		newMsgAfterAction.setOutputPath(umsg.getOutputPath());//the original output path from the request
		
		InputStream inStream;
		try {
			inStream = new GZIPInputStream(new ByteArrayInputStream(umsg.getMessage()));
		    ByteArrayOutputStream baoStream2 = new ByteArrayOutputStream();
		    byte[] buffer = new byte[8192];
		    int len;
		    while ((len = inStream.read(buffer)) > 0) {
		        baoStream2.write(buffer, 0, len);
		    }
		    
			newMsgAfterAction.setMessage(buffer);
			newMsgAfterAction.setMessageStatus(MessageStatusCodeEnum.Successful);
			inStream.close();
			baoStream2.close();
		
		} catch (IOException e) {
		    newMsgAfterAction.setMessage(("Decompression unsuccessful. Error: " + e.getMessage()).getBytes("UTF-8"));
			newMsgAfterAction.setMessageStatus(MessageStatusCodeEnum.Failed);
		}

        return newMsgAfterAction;
	}
}

//to learn gzip
//examples taken from stack over flow
//and
//http://www.softraction.com/2011/10/compressing-and-decompressing-string-in.html
